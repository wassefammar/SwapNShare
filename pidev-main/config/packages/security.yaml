security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'plaintext'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur 
                property: email
              

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true 
            provider: app_user_provider
            pattern: ^/
            custom_authenticator: 
                - App\Security\AppAuthenticator
               
            logout: 
                  path: app_logout
                # where to redirect after logout
                  target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            
                 #success_handler: acme.custom_success_handler  # Use a custom success handler instead of the default one
             
           


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/user, roles: ROLE_USER }  # Removed extra space
        - { path: ^/D/, roles: ROLE_ADMIN }  # Removed extra space
        #- { path: ^/e/, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/admin/home, roles: ROLE_ADMIN }
        - { path: ^/admin/services, roles: ROLE_ADMIN }
        - { path: ^/admin/categories, roles: ROLE_ADMIN }
        - { path: ^/admin/produits, roles: ROLE_ADMIN }
        - { path: ^/admin/reclamations, roles: ROLE_ADMIN }
        - { path: ^/admin/messages, roles: ROLE_ADMIN }
        - { path: ^/admin/commandes, roles: ROLE_ADMIN }
        - { path: ^/admin/utilisateurs, roles: ROLE_ADMIN }
        - { path: ^/admin/addadmin, roles: ROLE_ADMIN }


   

when@test:
    security:
        password_hashers:
          
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: plaintext
            App\Entity\Utilisateur:
                algorithm: plaintext


